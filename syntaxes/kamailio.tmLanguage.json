{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "kamailio",
	"firstLineMatch": "\\b(KAMAILIO|kamailio|SER|ser|SIP-ROUTER|sip-router|OPENSER|openser)\\b",
	"foldingStartMarker": "(?x)/\\*\\*(?!\\*)|^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))",
	"foldingStopMarker": "(?<!\\*)\\*\\*/|^\\s*\\}",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#controls"
		},
		{
			"include": "#conditionals"
		},
		{
			"include": "#stringdq"
		},
		{
			"include": "#stringsq"
		},
		{
			"include": "#punctuation"
		},
		{
			"match": "(\\#[!]|[!]{2})(KAMAILIO|kamailio|SER|ser|SIP-ROUTER|sip-router|ALL|all)\\b",
			"name": "support.class.kamailio"
		},
		{
			"comment": "Preprocessor directives with ID",
			"match": "(\\#[!]|[!]{2})(define|ifdef|ifndef|trydefine|trydef|redefine|redef|defenv|defenvs|trydefenv|trydefenvs)\\s*(\\w*)\\b",
			"captures": {
				"2": {
					"name": "storage.type.primitive.kamailio"
				},
				"3": {
					"name": "constant.other.kamailio"
				}
			},
			"name": "storage.type.primitive.kamailio"
		},
		{
			"comment": "Preprocessor directives without ID",
			"match": "(\\#[!]|[!]{2})(else|endif|subst|substdef|substdefs)\\b",
			"name": "storage.type.primitive.kamailio"
		},
		{
			"comment": "Line comment empty",
			"match": "^\\s*\\#$",
			"name": "comment.line.number-sign.kamailio"
		},
		{
			"comment": "Line comment",
			"begin": "\\#[^!]",
			"end": "\\n",
			"name": "comment.line.number-sign.kamailio"
		},
		{
			"comment": "Line comment",
			"begin": "//",
			"end": "\\n",
			"name": "comment.line.double-slash.kamailio"
		},
		{
			"comment": "Block comment",
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block.kamailio"
		},
		{
			"match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b",
			"name": "constant.numeric.kamailio"
		},
		{
			"comment": "Main routing blocks without name",
			"match": "\\b(request_route|reply_route|onsend_route)\\b",
			"name": "support.function.kamailio"
		},
		{
			"comment": "Main routing blocks with name",
			"match": "\\b(route|branch_route|failure_route|onreply_route|event_route)\\s*\\[([^\\]]+)\\]",
			"captures": {
				"1": {
					"name": "entity.name.class.kamailio"
				},
				"2": {
					"name": "constant.other.kamailio"
				}
			},
			"name": "support.function.kamailio"
		},
		{
			"comment": "Executing routing blocks with name",
			"match": "\\b(route)\\s*\\(([^)]+)\\)",
			"captures": {
				"1": {
					"name": "entity.name.function.kamailio"
				},
				"2": {
					"name": "constant.other.kamailio"
				}
			},
			"name": "support.function.kamailio"
		},
		{
			"match": "\\b(include_file|import_file)\\b",
			"name": "storage.type.primitive.kamailio"
		},
		{
			"match": "(\\#[!]|[!]{2})(include_file|import_file)\\b",
			"name": "storage.type.primitive.kamailio"
		},
		{
			"match": "(\\$)null\\b",
			"name": "constant.language.null.kamailio"
		},
		{
			"comment": "variables with inner name, root parenthesis, index and transformation",
			"begin": "(\\$)\\([a-zA-Z0-9_]+\\(([a-zA-Z0-9_]+)\\)",
			"end": "\\)",
			"patterns": [
				{
					"include": "#index"
				},
				{
					"include": "#transformation"
				}
			],
			"name": "support.variable.kamailio"
		},
		{
			"comment": "variables with simple name, root parenthesis, index and transformations",
			"begin": "(\\$)\\([a-zA-Z0-9_]+",
			"end": "\\)",
			"patterns": [
				{
					"include": "#index"
				},
				{
					"include": "#transformation"
				}
			],
			"name": "support.variable.kamailio"
		},
		{
			"comment": "variables with inner name",
			"match": "(\\$)[a-zA-Z0-9_]+\\(([a-zA-Z0-9_]+)\\)",
			"name": "support.variable.kamailio"
		},
		{
			"comment": "variables with simple name",
			"match": "(\\$)[a-zA-Z0-9_]+\\b",
			"name": "support.variable.kamailio"
		},
		{
			"match": "\\b(true|yes|on|enabled)\\b",
			"name": "constant.language.boolean.true.kamailio"
		},
		{
			"match": "\\b(false|no|off|disabled)\\b",
			"name": "constant.language.boolean.false.kamailio"
		},
		{
			"match": "\\b(loadmodule|loadmodulex|modparam|modparamx|loadpath|mpath|cfgengine)\\b",
			"name": "keyword.source.kamailio"
		},
		{
			"comment": "Core keyword variables",
			"match": "\\b(af|dst_ip|dst_port|from_uri|method|msg:len|proto|status|snd_af|snd_ip|snd_port|snd_proto|src_ip|src_port|to_af|to_ip|to_port|to_proto|to_uri|uri|uri:host|uri:port)\\b",
			"name": "support.variable.kamailio"
		},
		{
			"comment": "Core keyword values",
			"match": "\\b(max_len|myself|udp|UDP|tcp|TCP|tls|TLS|sctp|SCTP|ws|WS|wss|WSS|inet|INET|inet6|INET6|sslv23|SSLv23|SSLV23|sslv2|SSLv2|SSLV2|sslv3|SSLv3|SSLV3|tlsv1|TLSv1|TLSV1)\\b",
			"name": "constant.language.kamailio"
		},
		{
			"comment": "Syslog facility values",
			"match": "\\b(LOG_LOCAL[0-9]+)\\b",
			"name": "constant.language.kamailio"
		},
		{
			"match": "=|~|<|>|\\+|-|\\*|\\^|&|/|\\||!|\\b(?i:(mod|and|not|or|xor|defined|eq|ieq|ne|ine))\\b",
			"name": "keyword.operator.kamailio"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.kamailio",
					"match": "\\b(desc|advertise|name)\\b"
				}
			]
		},
		"sipkeywords": {
			"patterns": [
				{
					"name": "constant.language.kamailio",
					"match": "\\b(INVITE|ACK|BYE|CANCEL|PRACK|UPDATE|REGISTER|MESSAGE|INFO|OPTIONS|SUBSCRIBE|NOTIFY|PUBLISH|REFER|KDMQ|GET|POST|PUT|DELETE)\\b"
				},
				{
					"name": "constant.language.kamailio",
					"match": "\\b(SIP|From|To|Call-ID|CSeq|Route|Record-Route|Authorization|Proxy-Authorization|Contact|Expires|Content-Type|Content-Length|Via|User-Agent|P-Asserted-Identity)\\b"
				}
			]
		},
		"controls": {
			"patterns": [
				{
					"name": "entity.name.function.kamailio",
					"match": "\\b(return|exit|drop)\\b"
				}
			]
		},
		"conditionals": {
			"patterns": [
				{
					"name": "keyword.control.conditional.kamailio",
					"match": "\\b(if|else|while|switch|case|break|default)\\b"
				}
			]
		},
		"stringdq": {
			"name": "string.quoted.double.kamailio",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.kamailio",
					"match": "\\\\."
				},
				{
					"include": "#sipkeywords"
				}
			]
		},
		"stringsq": {
			"name": "string.quoted.single.kamailio",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.kamailio",
					"match": "\\\\."
				},
				{
					"include": "#sipkeywords"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"match": ",",
					"name": "punctuation.comma.kamailio"
				},
				{
					"match": ";",
					"name": "punctuation.terminator.kamailio"
				},
				{
					"match": "\\.",
					"name": "punctuation.dot.kamailio"
				}
			]
		},
		"transformation": {
			"begin": "\\{(s|uri|param|nameaddr|tobody|re|line|sql|msrpuri|json|url|sock|urialias|val)\\.",
			"end": "\\}",
			"name": "entity.name.function.kamailio"

		},
		"index": {
			"match": "\\[.+\\]",
			"name": "variable.parameter.kamailio"

		}
	},
	"scopeName": "source.kamailio"
}
